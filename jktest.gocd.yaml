---
  format_version: 10
  pipelines:
    jktest04:
      group: defaultGroup
      label_template: ${COUNT}
      lock_behavior: none
      display_order: -1
      materials:
        git-05a4d8c:
          git: https://github.com/jk0789/gocd_code.git
          username: jk0789
          encrypted_password: AES:G+k5P/AskkV1LFOxFYEAog==:QmHcs+OTwQL/GwdPLp2WYw==
          shallow_clone: false
          auto_update: true
          branch: main
      stages:
        - Deploy-and-test:
            fetch_materials: true
            keep_artifacts: false
            clean_workspace: false
            approval:
              type: success
              allow_only_on_success: false
            jobs:
              run-commands:
                timeout: 0
                environment_variables:
                  BUILD_DIR: /home/joshi/builds
                  TARGET_DIR: /home/joshi/prime-square
                  ARCHIVE_DIR: /home/joshi/archive
                  SERVICE: prime-square-service
                  TEMP_DIR: ${ARCHIVE_DIR}/temp-extract
                tasks:
                  - exec:
                      command: /bin/bash
                      arguments:
                        - -c
                        - >
                          
                          # Find the latest build (assuming it's a zip file)
  
                          LATEST_BUILD=$(ls -t "$BUILD_DIR"/*.zip 2>/dev/null | head -n 1)
  
  
                          if [ -z "$LATEST_BUILD" ]; then
                            echo "No builds found in ${BUILD_DIR}!"
                            exit 1
                          fi
  
  
                          echo "Found latest build: ${LATEST_BUILD}"
  
  
                          # Check if target directory exists
  
                          if [ ! -d "$TARGET_DIR" ]; then
                            echo "Target directory ${TARGET_DIR} does not exist. Creating..."
                            mkdir -p "$TARGET_DIR"
                            echo "Extracting build to ${TARGET_DIR}..."
                            unzip -o "$LATEST_BUILD" -d "$TARGET_DIR"
                          else
                            echo "Target directory ${TARGET_DIR} exists. Preparing to extract to temporary location..."
  
                            # Ensure archive and temp directories exist
                            mkdir -p "$TEMP_DIR"
                            mkdir -p "$ARCHIVE_DIR"
  
                            echo "Extracting build to temporary directory: ${TEMP_DIR}..."
                            unzip -o "$LATEST_BUILD" -d "$TEMP_DIR"
  
                            echo "Copying core-*.jar to ${TARGET_DIR}..."
                            JAR_FILE=$(find "$TEMP_DIR" -type f -name "core-*.jar" | head -n 1)
  
                            if [ -z "$JAR_FILE" ]; then
                              echo "No core-*.jar file found in the extracted build!"
                              exit 1
                            fi
  
                            echo "Found JAR file: $JAR_FILE"
                            cp "$JAR_FILE" "$TARGET_DIR"
  
                            echo "Cleaning up temporary directory..."
                            rm -rf "$TEMP_DIR"
                          fi
  
  
                          # Restart the service
  
                          echo "Restarting service ${SERVICE}..."
  
                          sudo systemctl restart "$SERVICE"
  
  
                          echo "Deployment complete."
                run_if: passed
  environments:
    jktest04:
      pipelines:
        - jktest04
  